package com.imageclustering;

/*** Author :Vibhav Gogate
The University of Texas at Dallas
*****/


import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import javax.imageio.ImageIO;
 

public class KMeans {
    public static void main(String [] args){
	if (args.length < 3){
	    System.out.println("Usage: Kmeans <input-image> <k> <output-image>");
	    return;
	}
	try{
	    BufferedImage originalImage = ImageIO.read(new File(args[0]));
	    int k=Integer.parseInt(args[1]);
	    BufferedImage kmeansJpg = kmeans_helper(originalImage,k);
	    ImageIO.write(kmeansJpg, "jpg", new File(args[2])); 
	    
	}catch(IOException e){
	    System.out.println(e.getMessage());
	}	
    }
    
    private static BufferedImage kmeans_helper(BufferedImage originalImage, int k){
	int w=originalImage.getWidth();
	int h=originalImage.getHeight();
	BufferedImage kmeansImage = new BufferedImage(w,h,originalImage.getType());
	Graphics2D g = kmeansImage.createGraphics();
	g.drawImage(originalImage, 0, 0, w,h , null);
	// Read rgb values from the image
	int[] rgb=new int[w*h];
	int count=0;
	for(int i=0;i<w;i++){
	    for(int j=0;j<h;j++){
		rgb[count++]=kmeansImage.getRGB(i,j);
	    }
	}
	// Call kmeans algorithm: update the rgb values
	kmeans(rgb,k);

	// Write the new rgb values to the image
	count=0;
	for(int i=0;i<w;i++){
	    for(int j=0;j<h;j++){
		kmeansImage.setRGB(i,j,rgb[count++]);
	    }
	}
	return kmeansImage;
    }

    private static void kmeans(int[] rgb, int k){
    	
    }
    
    // Your k-means code goes here
    // Update the array rgb by assigning each entry in the rgb array to its cluster center
//    private static void kmeans(int[] rgb, int k){
// 
//    	// Get all pixels and colors
//    	Color[] pixels = new Color[rgb.length];
//    	HashSet<Integer> diffColors = new HashSet<>();
//    	for(int index=0;index<rgb.length;index++)
//		{
//    		pixels[index]= new Color(rgb[index]);
//    		diffColors.add(rgb[index]);
//		}
//    	// initialize k centers
//    	Color[] c;
//
//    	if(diffColors.size()<k)
//    			k=diffColors.size();
//    	c= new Color[k];
//    	ArrayList<Integer> distinctColorsList = new ArrayList<Integer> (diffColors);
//    	HashMap<Integer,ArrayList> clusters = new HashMap<>();
//    	for(int i=0;i<k;i++)
//    	{
//    		c[i]= new Color(distinctColorsList.remove( 0 + (int)(Math.random()*distinctColorsList.size())));
//    		clusters.put(i, new ArrayList<Integer>());
//    	}
//    	int min=Integer.MAX_VALUE;
//    	int minIndex=0;
//    	int distance=0;
//    	ArrayList<Integer> iterate;
//    	while(true)
//    	{
//    		//calculate distance from centers and add into the clusters which has minimum distance 
//    		for(int index=0;index<rgb.length;index++)
//    		{
//    			min=Integer.MAX_VALUE;
//    			for(int i=0;i<k;i++)
//	        	{
//	        		distance = (int)(Math.pow(c[i].getRed()- pixels[index].getRed(),2)+Math.pow(c[i].getBlue()- pixels[index].getBlue(),2)+Math.pow(c[i].getGreen()- pixels[index].getGreen(),2));
//	        		if(min>distance)
//	        		{
//	        			min=distance;
//	        			minIndex=i;
//	        		}
//	        	}
//    			clusters.get(minIndex).add(index);
//    		}
//	       
//    		// Calculate Center mean 
//    	
//    		int redAverage=0;
//    		int greenAverage=0;
//    		
//    		int blueAverage=0;
//    		
//    		int count=0;
//    		for(int i=0;i<k;i++)
//        	{
//    			redAverage=0;
//    			greenAverage=0;
//    			blueAverage=0;
//    			iterate = clusters.get(i);
//    			for(Integer pixel:iterate)
//    			{
//    				redAverage+=pixels[pixel].getRed();
//    				greenAverage+=pixels[pixel].getGreen();
//    				blueAverage+=pixels[pixel].getBlue();
//    			}
//    			Color average = new Color((int)redAverage/iterate.size(),(int)greenAverage/iterate.size(),(int)blueAverage/iterate.size());
//    			if(c[i].getRGB()==average.getRGB())
//    				count++;
//    			c[i]=average;
//    			System.out.println(c[i]);
//        	}
//    		if(count==k)
//    			break;
//    		for(int i=0;i<k;i++)
//        	{
//        		clusters.put(i, new ArrayList<Integer>());
//        	}
//    	}
//    	
//    	//Modifying rgb values as per clustering results
//    	System.out.println(rgb.length);
// 		for(int i=0;i<k;i++)
//    	{
// 			System.out.println(clusters.get(i).size());
//			iterate = clusters.get(i);
//			for(Integer pixel:iterate)
//			{
//				rgb[pixel] = c[i].getRGB();
//			}
//    	}	

//   }

}